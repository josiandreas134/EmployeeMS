package com.example.controller;

import com.example.entity.Employee;
import com.example.entity.Team;
import com.example.repository.EmployeeRepository;
import com.example.repository.TeamRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private EmployeeRepository employeeRepository;
    @Autowired
    private TeamRepository teamRepository;


    //add a new entity to the system
    @RequestMapping(value="/spring/add", method = {RequestMethod.POST})
    public @ResponseBody
    Employee addNewEmployee (Employee input) {

        //this will create a new entity and save it to the system
        Employee n = new Employee(input.getName(),input.getPhoneNo(),input.getPosition());
        employeeRepository.save(n);
        return n;
    }

    //get all existing entities
    @GetMapping(path="/spring")
    public @ResponseBody Iterable<Employee> getAllEmployee() {
        return employeeRepository.findAll();
    }

    //get the information of an existing entity
    @GetMapping(path="/spring/{id}")
    public @ResponseBody Employee getEmployee(@PathVariable long id) {
        return employeeRepository.findById(id);
    }

    //delete an existing entity
    @RequestMapping(value="/spring/del{id}", method = {RequestMethod.DELETE})
    public @ResponseBody void deleteEmployee(@PathVariable int id) {
        employeeRepository.deleteById(id);
    }

    //update existing entity information
    @RequestMapping(value="/spring/update{id}", method = {RequestMethod.PUT})
    public @ResponseBody Employee updateEmployee(Employee input, @PathVariable int id) {

        Employee employee = getEmployee(id);
        if (input.getName() != null && employee !=null){ employee.setName(input.getName());}
        if (input.getPhoneNo() != null && employee !=null){employee.setPhoneNo(input.getPhoneNo());} ;
        if (input.getPosition() != null && employee !=null){ employee.setPosition(input.getPosition());} ;
        return employeeRepository.save(employee);
    }

    //search entity/ies using the sarch bar
    @RequestMapping(value="/spring/search={term}", method = {RequestMethod.GET})
    public @ResponseBody Iterable<Employee> getSearchedEmployee( @PathVariable String term) {
        return employeeRepository.searchByname(term);
    }

    //delete all entity on the system
    @RequestMapping(value="/spring/deleteAll", method = {RequestMethod.GET})
    public @ResponseBody void deleteAll() {
        // This returns a JSON or XML with the users
        Iterable<Employee> employees = employeeRepository.findAll();
        employees.forEach(e -> employeeRepository.deleteById(e.getId()));
    }

    @RequestMapping(value="/spring/addtoteam{employee_id}", method = {RequestMethod.PUT})
    public @ResponseBody Employee addToTeam(@PathVariable long employee_id, long team_id) {

        Employee employee = getEmployee(employee_id);
        Team team = teamRepository.findById(team_id);
        employee.getBelongsToTeam().add(team);
        return employeeRepository.save(employee);
    }

}